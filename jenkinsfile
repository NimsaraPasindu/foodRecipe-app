pipeline {
  agent any

  environment {
    DOCKER_USER = "nimsara2000"
    FRONTEND_IMAGE = "${DOCKER_USER}/mern-frontend"
    BACKEND_IMAGE = "${DOCKER_USER}/mern-backend"
    TAG = "${BUILD_NUMBER}"
    AZURE_CREDENTIAL_ID = 'azure-mern-sp' // This is the ID you set for the Service Principal in Jenkins
    AZURE_SUBSCRIPTION_ID = '037b1f82-0daa-4bf7-9b49-9fa707fac82d' // Your subscription ID from the SP JSON
    // REMOVED: AZURE_CLIENT_ID, AZURE_CLIENT_SECRET, AZURE_TENANT_ID from global environment
    // These are provided securely by the withCredentials block.
  }

  stages { // This is your main 'stages' block
    stage('Checkout') {
      steps {
        git url: 'https://github.com/NimsaraPasindu/foodRecipe-app.git'
      }
    }

    stage('Trivy Scan') {
      steps {
        sh 'trivy fs . || true' // don't fail build if vulnerabilities
      }
    }

    stage('Build Docker Images') {
      steps {
        sh '''
          docker build -t $FRONTEND_IMAGE:$TAG ./frontend
          docker build -t $BACKEND_IMAGE:$TAG ./backend
        '''
      }
    }

    // THIS IS THE NEWLY CORRECTED STAGE, directly inside the main 'stages' block
    stage('Azure Login and Get AKS Credentials') {
        steps {
            script {
                // Use the withCredentials block to securely expose the Service Principal details.
                // The 'azureServicePrincipal' binding automatically sets:
                // AZURE_CLIENT_ID, AZURE_CLIENT_SECRET, AZURE_TENANT_ID as environment variables
                // within this block's scope.
                withCredentials([azureServicePrincipal(credentialsId: "${AZURE_CREDENTIAL_ID}")]) {
                    sh '''
                        echo "Logging into Azure using Service Principal..."
                        # Authenticate Azure CLI using the Service Principal
                        az login --service-principal --username "$AZURE_CLIENT_ID" --password "$AZURE_CLIENT_SECRET" --tenant "$AZURE_TENANT_ID"

                        echo "Setting active Azure subscription..."
                        # Set the correct Azure subscription (important if the SP has access to multiple subscriptions)
                        az account set --subscription "$AZURE_SUBSCRIPTION_ID"

                        echo "Getting AKS credentials for mern-app in foodRecipe resource group..."
                        # Get AKS credentials. --overwrite-existing is useful in CI/CD to ensure fresh credentials.
                        az aks get-credentials --name mern-app --resource-group foodRecipe --overwrite-existing
                    '''
                }
            }
        }
    }

    // --- NEW STAGE: Deploy NGINX Ingress Controller ---
    stage('Deploy Ingress Controller') {
      steps {
        sh '''
          echo "Adding NGINX Ingress Helm repository..."
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update

          echo "Deploying NGINX Ingress Controller..."
          helm upgrade --install nginx-ingress ingress-nginx/ingress-nginx \\
            --namespace ingress-nginx \\
            --create-namespace \\
            --set controller.service.externalTrafficPolicy=Local \\
            --set controller.service.type=LoadBalancer \\
            --wait # Wait for the LoadBalancer to be provisioned
        '''
      }
    }

    stage('Login to Docker Hub & Push Images') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
          sh '''
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

            docker push $FRONTEND_IMAGE:$TAG
            docker push $BACKEND_IMAGE:$TAG
          '''
        }
      }
    }

    // This stage will use the kubeconfig generated by the 'Azure Login and Get AKS Credentials' stage
    stage('Deploy to AKS via Helm') {
      steps {
        sh '''
          echo "Deploying application to AKS via Helm..."
          # az aks get-credentials is NOT needed here again as it was done in the previous stage.
          # Helm will automatically use the kubeconfig file written by the previous 'az aks get-credentials' command.
          helm upgrade --install myapp ./helm \\
            --set frontend.image.repository=$FRONTEND_IMAGE \\
            --set frontend.image.tag=$TAG \\
            --set backend.image.repository=$BACKEND_IMAGE \\
            --set backend.image.tag=$TAG
        '''
      }
    }
  } // Closing brace for the main 'stages' block
} // Closing brace for the 'pipeline' block
