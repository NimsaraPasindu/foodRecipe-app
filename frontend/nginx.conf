worker_processes auto;

events {
    worker_connections 1024;
}

http {
    # Include common MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Basic logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Server block for your React application
    server {
        listen 80; # Listen on port 80 inside the container (as configured in backend-deployment.yaml)
        server_name localhost; # Can be anything, useful for local testing

        # Set the root directory for serving static files
        root /usr/share/nginx/html;

        # Serve static files directly
        location / {
            try_files $uri $uri/ /index.html; # Try to find file, directory, or fallback to index.html for SPA routing
        }

        # Handle assets, ensuring correct MIME types
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|woff|woff2|ttf|eot|svg)$ {
            expires max;
            log_not_found off;
            add_header Cache-Control "public"; # Cache control for static assets
        }

        # Optional: Proxy /api requests if your NGINX was to handle proxying directly
        # However, your Ingress Controller is handling /api routing, so this block is not strictly needed
        # location /api {
        #     proxy_pass http://backend-service-name:5000; # Example: internal K8s service for backend
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
        # }
    }
}
